[gcode_shell_command dropProbe]
command: sh /home/pi/printer_data/config/script/dropProbe.sh 
timeout: 30.
verbose: True

[gcode_macro ADD_DROP_PROBE]
gcode:
    RUN_SHELL_COMMAND CMD=dropProbe

[servo klicky_servo]
#check were your servo is wired
pin: mcu:E0_STOP
maximum_servo_angle: 180
minimum_pulse_width: 0.0005
maximum_pulse_width: 0.0025
#minimum_pulse_width: 0.00025
#maximum_pulse_width: 0.0024

[gcode_macro My_Attach_Probe_Lock]
gcode:
    G90
    XYCG28
    Attach_Probe_Lock
    G28 Z

[gcode_macro _servo_test_angle]
gcode:
	{% set ANGLE  = params.ANGLE|int %}
	
    SET_SERVO SERVO=klicky_servo ANGLE={ANGLE}
    G4 P250
    SET_SERVO SERVO=klicky_servo WIDTH=0.0

[gcode_macro _servo_deploy]
gcode:
    _servo_test_angle angle=10

[gcode_macro _servo_retract]
gcode:
    _servo_test_angle angle=80

[gcode_macro Error_Attach_Dock_Probe]
description: Docks Klicky Probe
gcode:
    # See if the position should be restored after the dock
    {% set goback  = params.BACK|default(0) %}
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached|default(1) %}
    {% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
    {% set verbose = printer["gcode_macro _User_Variables"].verbose %}
    # Get Docking location
    {% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
    {% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
    {% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
    {% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
    {% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
    {% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
    {% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
    {% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    # Set feedrates
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
    {% if bypass_probe_docking == False %}
    {% else %}
        _KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"
    {% endif %}


    {% if bypass_probe_docking == False %}
        _entry_point function=Dock_Probe

        # If probe not attached and not locked
        {% if probe_attached and not probe_lock %}
            # If axis aren't homed, fail
            {% if not 'xy' in printer.toolhead.homed_axes %}
                { action_raise_error("Must Home X and Y Axis First!") }
            {% endif %}
            _KlickyDebug msg="Dock_Probe Axis homed"
            _KlickyDebug msg="Dock_Probe going to dock probe"
            {% if verbose %}
                { action_respond_info("Docking Probe") }
            {% endif %}
            _KLICKY_STATUS_BUSY

            {% if printer.toolhead.position.z < safe_z %}
                _KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}

            _Umbilical_Path

            # Probe entry location
            _KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"
            G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
            {% if docklocation_z != -128 %}
                _KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
                G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
            {% endif %}

            # if necessary do some actions before moving the toolhead to dock
            _DeployKlickyDock

            # Drop Probe to Probe location
            _KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
            G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
            {% if docklocation_z != -128 %}
                _KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
                G0 Z{docklocation_z} F{dock_feedrate}
            {% endif %}

            # Probe decoupling
            {% if docklocation_z != -128 %}
                _KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"
                G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
            {% endif %}
            _KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"
            G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}

            # if necessary do some actions after attaching the probe
            _RetractKlickyDock

            #Do an extra move away
            _KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"
            G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}

            ## Go to Z safe distance
            {% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
              _KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
              G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}

            _Park_Toolhead

            G4 P1000
            _CheckProbe action=dock
            _KLICKY_STATUS_READY

        {% elif probe_lock %}
            {% if verbose %}
                { action_respond_info("Probe locked") }
            {% endif %}

            # Probe docked, do nothing
            _KlickyDebug msg="Dock_Probe probe locked not docking probe"
            _CheckProbe action=query

        {% else %}
            {% if verbose %}
                { action_respond_info("Probe already docked") }
            {% endif %}

            # Probe docked, do nothing
            _KlickyDebug msg="Dock_Probe probe already docked, doing nothing"
            _CheckProbe action=query

        {% endif %}

        _exit_point function=Dock_Probe move={goback}
    {% else %}
        _KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"
    {% endif %}

[gcode_macro Error_Dock_retract]
description: Retracts Klicky servo-controlled dock
gcode:
    {% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
    {% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
    {% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
    {% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}
    
    #wait for all the moves to complete
	_Probe_Unlock
    M400
    {% if enable_dock_servo != False %}
        _KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"
        {% if servo_retract == 360 %}
            { action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }
        {% endif %}
        _KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"
        SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}
        M400
        G4 P{servo_delay|int}
        _KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"
        SET_SERVO SERVO={servo_name|string} WIDTH=0
    {% endif %}