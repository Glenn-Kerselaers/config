[exclude_object]

[save_variables]
filename: /home/pi/printer_data/config/saved_variables.cfg

[force_move]
enable_force_move: True

[display_status]

[gcode_arcs]
resolution: 1.0

[virtual_sdcard]
path: /home/pi/printer_data/gcodes

[pause_resume]
recover_velocity: 300.0

[respond]
default_type: command

[gcode_macro _UserDebug]
gcode:
    {% set message  = params.MSG %}
    #{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}
    
    #{% if debug %}
    { action_respond_info(message) }
    #{% endif %}    

[gcode_macro START_TEMPS]
description: START_TEMPS
gcode:
    {% set hotend = params.EXTRUDER|default(245)|int %}
    {% set bed = params.BED|default(110)|int %}

    M140 S{bed}
    M190 S{bed}

    M104 S{hotend}
    M109 S{hotend}

[gcode_macro PID]
description: PID Hot-end and bed
gcode:
    {% set hotend = params.EXTRUDER|default(245)|int %}
    {% set bed = params.BED|default(110)|int %}

    PARKBED
    M106 S205
    _UserDebug msg="PID bed to {bed|int} degrees celcius"
	PID_CALIBRATE HEATER=heater_bed TARGET={bed}

    G1 Z10 F1500
	M106 S64
    _UserDebug msg="PID extruder to {hotend|int} degrees celcius"
	PID_CALIBRATE HEATER=extruder TARGET={hotend}
	SAVE_CONFIG

[gcode_macro DWELL_WAIT]
description: wait for x minutes
gcode:
    {% set dwell = params.DWELL|default(10)|int %}
    _UserDebug msg="Waiting for {dwell|int} minute(s)"
    G4 P{dwell*60000}
    _UserDebug msg="Waiting done"

[gcode_macro PREHEAT]
description: Preheat bed and wait x minutes
gcode:
    {% set bed = params.BED|default(110)|int %}
    {% set dwell = params.DWELL|default(10)|int %}

    G90
    CG28
    PARKBED
    STATUS_HEATING

    _UserDebug msg="Heating bed to {bed|int} degrees celcius"
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed}
    M190 S{bed}
    M106 S205
    DWELL_WAIT DWELL={dwell}
    M107

######################### ALIASES/SHORTCUTS #########################

[gcode_macro DISABLE_MOTORS]
description: Disable XYZE motor immediately
gcode:
    M18

[gcode_macro OFF]
description: Turn off everything
gcode:
	DISABLE_MOTORS
    TURN_OFF_HEATERS
    M107
	OFFRGB
    OFFRGBLCD

######################### CONFIG BACKUP #########################

[gcode_macro BACKUP_CFG]
description: Backup configs to github
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_shell_command backup_cfg]
command: sh /home/pi/printer_data/config/script/autocommit.sh
timeout: 30.
verbose: True

# Calls my "OFF" macro to shut off everything (lights etc), turns off LCD lighting, then shuts down the Pi
[gcode_macro SHUTDOWN]
gcode:
    LCDRGB R=0 G=0 B=0
    OFF
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible
    {action_call_remote_method("shutdown_machine")}   ; Moonraker compatible

[gcode_macro REBOOT]
gcode:
    LCDRGB R=0 G=0 B=0
    OFF
    {action_call_remote_method("reboot_machine")}

######################### LOAD/UNLOAD #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83                                   ; set extruder to relative
    G1 E10 F600                           ; extrude a little to soften tip 
    G1 E-120 F1800                        ; retract filament completely
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83 ; set extruder to relative
    G1 E90 F600
    RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    UNLOAD_FILAMENT
    
[gcode_macro HOT_LOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    LOAD_FILAMENT

######################### MISC #########################

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    STATUS_HEATING
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}
    STATUS_HEATING
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

##  Clear display output after Duration in seconds
##  Use: UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117

## Reset SD File after Print_END or CANCEL_PRINT
## This will avoid the reprint option in Mainsail after a print is done
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[gcode_macro FILAMENT_INSERT_PREHEAT]
gcode:
	M109 S250
	RESPOND PREFIX=tgalarm MSG="Preheated, insert filament, run "
	G4 P1000
	RESPOND PREFIX=tgnotify MSG="/FILAMENT_INSERT"
	
[gcode_macro FILAMENT_INSERT]
gcode:
	M109 S250
	M83
	G1 E100 F250
	M104 S0

[gcode_macro M600]
gcode:
    PAUSE