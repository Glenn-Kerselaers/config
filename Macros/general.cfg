[exclude_object]

[save_variables]
filename: /home/pi/printer_data/config/vars.cfg

[force_move]
enable_force_move: True

[display_status]

[gcode_arcs]
resolution: 1.0

[virtual_sdcard]
path: /home/pi/printer_data/gcodes

[pause_resume]
recover_velocity: 300.0

[respond]
default_type: command

[gcode_macro _UserDebug]
gcode:
    {% set message  = params.MSG %}
    #{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}
    
    #{% if debug %}
    { action_respond_info(message) }
    #{% endif %}   

######################### CONFIG BACKUP #########################

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
	
[gcode_shell_command backup_cfg]
command: sh /home/pi/printer_data/config/script/autocommit.sh
timeout: 30.
verbose: True

######################### IDLE/SHUTDOWN #########################

[idle_timeout]
gcode:
  ;G91
  ;G1 Z5 F18000.0 
  ;G90                                 																
  ;G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F18000.0  
  OFF
timeout: 10800 # 2 hrs

[delayed_gcode DELAYED_OFF]
gcode:
	OFF

######################### ALIASES/SHORTCUTS #########################

[gcode_macro PID]
description: PID Hot-end and bed
gcode:
    {% set hotend = params.EXTRUDER|default(245)|int %}
    {% set bed = params.BED|default(110)|int %}

    PARKBED
    M106 S205
    _UserDebug msg="PID bed to {bed|int} degrees celcius"
	PID_CALIBRATE HEATER=heater_bed TARGET={bed}

    G1 Z10 F1500
	M106 S64
    _UserDebug msg="PID extruder to {hotend|int} degrees celcius"
	PID_CALIBRATE HEATER=extruder TARGET={hotend}
	SAVE_CONFIG

[gcode_macro QGL]
gcode:
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	
[gcode_macro BMC]
gcode:
	BED_MESH_CALIBRATE

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
	M84												; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off
	OFFRGB

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    STATUS_HEATING
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}
    STATUS_HEATING
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

######################### SAFETY #########################

# Lower z stepper current (in case of crash). Referenced in my klicky homing overrides and in calibrate_z.
[gcode_macro LOWERCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.35 HOLDCURRENT=0.35
	
# Returns z steppers back to their currents specified in the config.
[gcode_macro RESETCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z1"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z2"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z3"].hold_current}	

######################### MISC #########################

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0.0
	G28
	QUAD_GANTRY_LEVEL
	G28 Z

[gcode_macro ZES_CALIBRATE]
gcode:
    M190 S110
    M109 S245
    DWELL_WAIT DWELL=15
	G32
    G90
    G1 X270 Y270 F6000
    G0 Z10
    Z_ENDSTOP_CALIBRATE

[gcode_macro DWELL_WAIT]
gcode:
    {% set dwell = params.DWELL|default(10)|int %}
    _UserDebug msg="Waiting for {dwell|int} minute(s)"
    G4 P{dwell*60000}
    _UserDebug msg="Waiting done"

[gcode_macro PREHEAT]
gcode:
    {% set bed = params.BED|default(110)|int %}
    {% set dwell = params.DWELL|default(10)|int %}

    G90
    CG28
    PARKBED
    STATUS_HEATING

    _UserDebug msg="Heating bed to {bed|int} degrees celcius"
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed}
    M190 S{bed}
    M106 S205
    DWELL_WAIT DWELL={dwell}
    M107

[gcode_macro GET_TEMPERATURE_FRAME_SAVE]
gcode:
	{% set temperature = params.TEMPERATURE|default(printer['temperature_sensor Frame'].temperature)|float %}
    _UserDebug msg="FRAME temperature: {temperature|float}"
    BED_MESH_PROFILE SAVE={temperature}

[gcode_macro GET_TEMPERATURE_FRAME]
gcode:
	{% set temperature = params.TEMPERATURE|default(printer['temperature_sensor Frame'].temperature)|float %}
    _UserDebug msg="FRAME temperature: {temperature|float}"

[gcode_macro Calibrate_Mesh_VGB]
gcode:		
	# Parameters
	{% set bed = params.BED|default(110)|int %}

    M220 S100 ; reset feedrate
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M83 ; use relative distances for extrusion

    BED_MESH_CLEAR
    G90
    M107
	G28

    PREHEAT BED={bed} DWELL=5
    G28 Z
    Attach_Probe_Lock
    M104 S200
	QUAD_GANTRY_LEVEL

    M109 S200
    CLEAN_NOZZLE
    G28 Z
    CALIBRATE_Z
    BED_MESH_CALIBRATE
    GET_TEMPERATURE_FRAME
    Dock_Probe_Unlock

# VintageGriffin's automatic prime line macro
[gcode_macro PRIME_LINE]
description: Print an easy to remove parametric extruder priming line with a built-in handle.
gcode:
    # settings
    {% set area = {
      'min_x'          : params.AREA_START.split(",")[0]|float,
	    'min_y'          : params.AREA_START.split(",")[1]|float,
      'safe_x'         : 55, # lowest X coordinates where the prime line can start
      'safe_y'         : 10, # lowest Y coordinates where the prime line can start
      'offset'         : 30, # distance in the Y axis between the prime line and the print skirt
    } %}
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(0)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(8)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(1)|int, # mm of filament to recract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(40)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 0   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}

    # sanity check and computed variables
    {% set max_x, max_y, nozzle_diameter = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float, printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter * 0.75, 'length': [line.length, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding + range(0,5)|random})  %}
    {% if area.min_x < area.safe_x %}
      {% set start_x = area.safe_x|float %}
    {% else %}
      {% set start_x = area.min_x|float %}
    {% endif %}
    {% if (area.min_y - area.offset) < area.safe_y %}
      {% set start_y = area.safe_y|float %}
    {% else %}
      {% set start_y = (area.min_y - area.offset)|float %}
    {% endif %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    _UserDebug msg="Prime Line"
    STATUS_CLEANING
    G90 # absolute positioning
    M109 S{params.EXTRUDER_TEMP} # Wait until 98% of extruder temp is reached, then continue  
    M104 S{params.EXTRUDER_TEMP} # Set printing extruder temp
    G0 X{start_x} Y{start_y} Z{line.height + 0.5} F{line.travel_speed * 60} # move to starting position
    G0 Z{line.height} F{line.travel_speed}
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
      G0 F{line.print_speed * 60} # set print speed
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE