[display]
#    MKS Mini 12864 V3.0 Your display might have to haver connectors flipped. If the neopixels doesnt light up and you are 100% sure you have EXP1 connected to EXP1, try flipping the connector.
lcd_type: uc1701
cs_pin: mcu:EXP1_7
a0_pin: mcu:EXP1_8
rst_pin: mcu:EXP1_6
encoder_pins: ^mcu:EXP1_3,^mcu:EXP1_5
click_pin: ^!mcu:EXP1_1
contrast: 63
spi_software_sclk_pin: mcu:SPI_SCLK
spi_software_mosi_pin: mcu:SPI_MOSI
spi_software_miso_pin: mcu:SPI_MISO
display_group: __voron_display
menu_timeout: 60

[display_template _vheater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

#########################################################
# This section defines the actual chamber temp. field,
# replace 'temperature_sensor chamber' as necessary
#########################################################
[display_data __voron_display chamber]
position: 2, 0
text:
  {% set chamber = printer['temperature_sensor Chamber'] %}
	~chamber~
	{ "%3.0f" % (chamber.temperature,) }
	~degrees~

[display_data __voron_display print_status]
position: 3, 0
text: 
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { "VS.402 " }
	~voron~
  {% endif %}

[display_glyph chamber]
data:
    ................
    ****************
    *....*....*....*
    *....*....*....*
    *....******....*
    *..............*
    *..............*
    *.....****.....*
    *.***.*..*.***.*
    *.....****.....*
    *......**......*
    *..............*
    *.************.*
    *...*......*...*
    ****************
    ................

[display_glyph voron]
data:
   .......**.......
   .....******.....
   ....********....
   ..************..
   .*****..**..***.
   .****..**..****.
   .***..**..*****.
   .**..**..******.
   .******..**..**.
   .*****..**..***.
   .****..**..****.
   .***..**..*****.
   ..************..
   ....********....
   .....******.....
   .......**.......

#### DISABLEMENTS ####
[menu __main __octoprint]
type: disabled

[menu __main __control __fanonoff]
type: disabled

[menu __main __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: SD Card

#### TUNE MENU ####

#OVERRIDE INPUT_STEP DISTANCE
[menu __main __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.01
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

#### FILAMENT MENU ####

#OVERRIDE FILAMENT MACROS / DISABLE "SLOW" VERSIONS
[menu __main __filament __hotloadf]
type: input
name: H load: {menu.input}
input: 230
input_min: 180
input_max: 300
input_step: 10
gcode:
    HOT_LOAD T={menu.input}
    
[menu __main __filament __hotunloadf]
type: input
name: H unload: {menu.input}
input: 230
input_min: 180
input_max: 300
input_step: 10
gcode:
    HOT_UNLOAD T={menu.input}

[menu __main __filament __loadf]
type: command
name: Load Filament
gcode:
    LOAD_FILAMENT
    
[menu __main __filament __loads]
type: disabled
    
[menu __main __filament __unloadf]
type: command
name: Unload Filament
gcode:
    UNLOAD_FILAMENT
    
[menu __main __filament __unloads]
type: disabled

#ADD FAST FILAMENT FEED 
[menu __main __filament __feedfast]
type: input
name: Feed fast: {'%.1f' % menu.input}
input: 10
input_step: 10
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E{'%.1f' % menu.input} F300
    RESTORE_GCODE_STATE NAME=__filament__load
    
#### CONTROL MENU ####	

[menu __main __control __mesh]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Mesh
gcode: BED_MESH_CALIBRATE

[menu __main __control __parkfront]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Park front
gcode: PARKFRONT

[menu __main __control __parkfrontlow]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Park front low
gcode: PARKFRONTLOW

[menu __main __control __parkrear]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Park rear
gcode: PARKREAR

[menu __main __control __parkcenter]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Park center
gcode: PARKCENTER

[menu __main __control __parkbed]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Park bed
gcode: PARKBED

[menu __main __control __off]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: OFF
gcode: OFF

#### TEMP MENU ####

#ADD ABS PREHEAT
[menu __main __temp __preheat_abs]
type: list
name: Preheat ABS

[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S110
    M104 S245

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S245

[menu __main __temp __preheat_abs __bed]
type: command
enable: {'heater_bed' in printer}
name: Preheat bed
gcode: M140 S110
	
#### SETUP MENU ####
	
[menu __main __setup __shutdown]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Shut down
gcode: SHUTDOWN

[menu __main __setup __reboot]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Reboot
gcode: REBOOT